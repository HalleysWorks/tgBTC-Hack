#include "imports/stdlib.fc";

;; ==============================
;; STON.fi Pool Adapter (Corrected)
;; ==============================

;; Method IDs
const int STON_GET_POOL_DATA   = 0x43c034e6;  ;; get_pool_data
const int STON_PROVIDE_LP_OP   = 0xfcf9e58f;  ;; provide_lp

;; Query pool reserves from a STON.fi pool contract
() query_ston_pool_reserves(slice pool_address, int query_id) impure inline {
    cell msg = begin_cell()
        .store_uint(0x18, 6)        ;; internal header
        .store_slice(pool_address)  ;; target pool address
        .store_coins(100000000)     ;; 0.1 TON for gas
        .store_uint(0, 107)         ;; body header (107 bits)
        .store_uint(STON_GET_POOL_DATA, 32)
        .store_uint(query_id, 64)
    .end_cell();
    send_raw_message(msg, 3);
}

;; Handle the asynchronous callback with pool reserves data
() handle_ston_pool_response(cell in_msg_full, slice in_msg_body) impure inline {
    ;; parse sender if needed:
    ;; slice sender = in_msg_full.begin_parse().load_msg_addr();
    int op       = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == STON_GET_POOL_DATA) {
        int reserve0      = in_msg_body~load_coins();
        int reserve1      = in_msg_body~load_coins();
        slice token0_addr = in_msg_body~load_msg_addr();
        slice token1_addr = in_msg_body~load_msg_addr();
        ;; on-chain adapters typically forward or store this data; omitted here
    }
}

;; Add liquidity to a STON.fi pool
() add_liquidity_ston(slice pool_address, int amount0, int amount1, int query_id) impure inline {
    cell msg = begin_cell()
        .store_uint(0x18, 6)        ;; internal header
        .store_slice(pool_address)  ;; target pool address
        .store_coins(200000000)     ;; 0.2 TON for gas
        .store_uint(0, 107)         ;; body header (107 bits)
        .store_uint(STON_PROVIDE_LP_OP, 32)
        .store_uint(query_id, 64)
        .store_slice(my_address())  ;; LP owner address
        .store_coins(1)             ;; min_lp_out
        .store_coins(amount0)       ;; amount of token0
        .store_coins(amount1)       ;; amount of token1
    .end_cell();
    send_raw_message(msg, 3);
}

;; Dummy main entrypoint for Blueprint/Fift
() main() impure {
    return ();
}
